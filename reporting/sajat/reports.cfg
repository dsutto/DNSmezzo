[top100]
template = "top100.tmpl.xhtml"
output = "top100.html"
query = "SELECT DISTINCT registered_domain AS domain, count(registered_domain) AS count FROM DNS_packets WHERE query GROUP BY registered_domain ORDER BY count DESC LIMIT %(limit)s"
limit = 100
data = {'limit': limit}
keys = ('domain', 'count')
contexname = "domains"

[qtypes_png]
query = "select * from crosstab('select start, type, num from qtype where type=''A'' or type=''AAAA'' or type=''NS'' or type=''MX'' or type=''SOA'' order by 1,2', 'select type from dns_types where value in (select value from interesting_qtypes) order by value') as qtype(start timestamp, A bigint, NS bigint, SOA bigint, MX bigint, AAAA bigint);"

[greece2k_png]
query = "select * from crosstab('select start, type, num from qtype_greece2k where type=''A'' or type=''AAAA'' or type=''NS'' or type=''MX'' or type=''SOA'' order by 1,2', 'select type from dns_types where value in (select value from interesting_qtypes) order by value') as qtype(start timestamp, A bigint, NS bigint, SOA bigint, MX bigint, AAAA bigint);"

[qtypes]
template = "qtypes.tmpl.xhtml"
output = "qtypes.html"
query = "SELECT type, meaning, count(*), cast(count(*) as real)/(select count(*) from dns_packets where query) as perc from dns_packets,dns_types where query and qtype=value group by 1, 2 order by 1 asc;"
keys = ('type', 'meaning', 'count', 'perc')
prep = (None, None, None, lambda n: '{0:.2%}.'.format(float(n)) )
contexname = "qtypes"

[nxdomain]
template = "nxdomain.tmpl.xhtml"
output = "nxdomain.html"
query = "SELECT DISTINCT registered_domain AS domain, count(registered_domain) AS num FROM DNS_packets WHERE NOT query AND rcode=3 GROUP BY registered_domain ORDER BY num DESC LIMIT %(limit)s"
limit = 100
data = {'limit': limit}
keys = ('domain', 'count', 'perc')
contexname = "domains"

[ipv6_png]
query = "select date_trunc('hour', date) + interval '60 minutes' * floor(extract(minute from date) / 60) as start, count(*) from dns_packets where query and family(src_address)=6 group by 1 order by 1 asc;"

[ipv6]
template = "ipv6.tmpl.xhtml"
output = "ipv6.html"
query = "select cast(count(*) as real) / (select count(*) from dns_packets where query) from dns_packets where query and family(src_address)=6 order by 1 asc;"
keys = ('perc',)
prep = (lambda n: '{0:.2%}'.format(float(n)), )
contexname = "v6-queries"

[kaminsky]
template = "kaminsky.tmpl.xhtml"
output = "kaminsky.html"
query = "SELECT src_address AS resolver,count(id) AS requests, count(DISTINCT src_port) AS ports, cast(count(DISTINCT src_port) as real)/count(id) as ratio FROM DNS_Packets WHERE query GROUP BY resolver ORDER BY ratio asc, requests desc limit %(limit)s;"
limit = 100
data = {'limit': limit}
keys = ('resolver', 'requests', 'ports', 'ratio')
prep = (None, None, None, lambda n: '{0:.2%}.'.format(float(n)) )
contexname = "resolvers"

[kaminsky_png]
query = "select count(resolver), trunc(ratio,2) from (SELECT src_address AS resolver, count(id) AS requests,cast(count(DISTINCT src_port)as numeric)/count(id) as ratio FROM DNS_Packets WHERE query GROUP BY resolver ORDER BY ratio asc) as list where requests > 20 group by 2 order by trunc;"

